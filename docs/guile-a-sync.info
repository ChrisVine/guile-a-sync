This is guile-a-sync.info, produced by makeinfo version 6.1 from
guile-a-sync.texi.


File: guile-a-sync.info,  Node: Top,  Next: coroutines

guile-a-sync reference
**********************

This is the guile-a-sync library.  It provides both an asynchronous
event loop for guile, and coroutines to enable an event loop (including
other event loops such as the glib event loop) to be used with 'await'
semantics to deal with inversion of control - otherwise known as
"callback hell".

   The guile-a-sync library is provided in five modules:
* Menu:

* coroutines::     In module (a-sync coroutines) - provides coroutines for await semantics on asynchronous events
* event loop::     In module (a-sync event-loop) - provides an event loop for asynchronous events
* monotonic time:: In module (a-sync monotonic-time) - enables monotonic time to be used for timeouts
* gnome glib::     In module (a-sync gnome-glib) - provides some convenience await procedures for the glib main loop
* compose::        In module (a-sync compose) - provides the compose-a-sync macro interface for the a-sync coroutine


File: guile-a-sync.info,  Node: coroutines,  Next: event loop,  Prev: Top,  Up: Top

The (a-sync coroutines) module provides the following procedures:

 -- Scheme Procedure: make-iterator proc . args
     This procedure takes a generator procedure, namely a procedure
     which has a 'yield' parameter for its first or only argument,
     followed by such other arguments (other than the one for the
     'yield' parameter) as the generator procedure requires, and
     constructs an iterator from them.  When the iterator (which
     optionally takes no or one argument) is invoked, it will begin
     executing the procedure unless and until the argument comprising
     the yield procedure is called, which will cause the iterator to
     suspend computation and instead return the value passed to yield,
     if any (yield is a procedure taking no or one argument).  If
     invoked again, the iterator will resume computation at the point
     where it last left off (returning the value, if any, passed to the
     iterator on resuming).  When the generator procedure has executed
     to the end, the iterator returns 'stop-iteration.  This procedure
     has some resemblance to call/ec, except that (i) instead of
     executing the passed procedure immediately, it returns an iterator
     which will do so, (ii) it is resumable, and (iii) the procedure to
     be executed can receive starting arguments in addition to the
     yield/break argument, to provide an alternative to binding them
     with a lambda closure.  It is similar to ECMAScript generators and
     python generators.

 -- Scheme Procedure: make-coroutine proc . args
     This procedure takes a generator procedure, namely a procedure
     which has a 'yield' parameter for its first or only argument,
     followed by such other arguments (other than the one for the
     'yield' parameter) as the generator procedure requires, and
     constructs a coroutine.  It is similar to make-iterator, in that it
     takes a generator procedure and returns a lambda object (a
     coroutine) which when called will begin executing the generator
     procedure unless and until the argument comprising the yield
     procedure is called, which will cause computation to be suspended.
     However unlike make-iterator, the resumption continuation generated
     on yielding is returned by the coroutine when yielding rather than
     being stored internally in an iterator, so there is no explicit
     retained mutable state.  The return value of the coroutine
     comprises two values: first the resumption continuation, and second
     the value (if any) passed to 'yield' when called.  If the returned
     resumption continuation is subsequently called again, computation
     will be resumed at the point where it last left off (the yield
     procedure returning the value, if any, passed to the continuation
     on resuming) until it completes or it again calls the yield
     procedure.

     Upon the generator procedure finally completing, the value to which
     it evaluates is returned by the resumption continuation together
     with a continuation value of #f.  This differs from the behaviour
     of make-iterator, which returns 'stop-iteration when the generator
     procedure finishes to completion and ignores its return value.

 -- Scheme Procedure: a-sync waitable . args
     a-sync takes a waitable procedure (namely a procedure which takes
     'await' as its first parameter, which is a yield procedure obtained
     by a call to make-iterator, and 'resume' as its second parameter,
     which is an iterator constructed by make-iterator), followed by
     such other arguments (if any) as the waitable procedure requires to
     be passed on to it.  The 'resume' argument must only be called by
     an asynchronous callback, and the 'await' argument must only be
     called by the waitable procedure in order to block until the
     callback is ready to let it resume.  When it unblocks, the 'await'
     argument returns the value (if any) passed to 'resume' by the
     callback.  This async procedure must be called in the same thread
     as that in which the event loop runs.

     None of the code in the waitable procedure should block on other
     things in the program, except by calls to await (which do not in
     fact block, even though they appear to do so).

     The way it works is that the call to a-sync will begin executing
     the waitable procedure and will return as soon as the first (or
     only) call to 'await' is made by that procedure, or as soon as the
     waitable procedure returns if it makes no calls to 'await'.  Any
     subsequent resumptions of the waitable procedure will take place in
     the event loop concerned as delimited continuations, via the calls
     to 'resume' made by the callbacks.  The effect of the waitable
     procedure subsequently ending, or of further calls to 'await' being
     made within the same waitable procedure, is to return control to
     the event loop by recommencing execution at the point where the
     most recent previous call to 'resume' was made by the last callback
     to execute.

     An exception thrown in the waitable procedure before the first call
     to 'await' which is not handled locally will propagate out of the
     a-sync procedure normally.  Any exception thrown subsequently in
     the waitable procedure which is not handled locally will propagate
     into the previously called callback at the point where 'resume' was
     last called.  If this is handled locally in the callback by putting
     a catch block around resume, then control will be returned to the
     event loop and the remainder of the waitable procedure will not
     execute.  If that exception is not handled locally in the callback,
     or if the callback throws an exception of its own, then it will
     propagate out of the event loop.  If the event loop in the
     event-loop module is used, this means that it will propagate out of
     the call to event-loop-run!.  If an exception propagates out of
     event-loop-run!  for that or some other reason, then the event loop
     will be left in a valid state and it will be as if event-loop-quit!
     had been called on it, but it is then up to the user to catch that
     exception once it is out of event-loop-run!  if she does not want
     the program to terminate.

     After the call to 'resume', the callback should normally just
     return (with a #t or #f value in the case of a file watch or a
     timeout on an event-loop object from the event loop module).  If
     a-sync is used with a file watch or timeout on an event-loop object
     constructed by make-event-loop, the watch callback or timeout
     callback should normally, when the call to 'resume' returns, either
     always return #f (so the callback only fires once) or always return
     #t (so it is responsibility of the waitable procedure to terminate
     the watch or timeout repetitions).  That way, there can never be a
     case where the callback has been removed from the event loop by
     returning false but the waitable procedure still thinks it has a
     call to 'await' to be made.  The *note event-loop: event loop.
     module has await-task!, await-task-in-thread!, await-timeout!,
     a-sync-read-watch!, await-getline!  and a-sync-write-watch!
     convenience procedures which will correctly set this up for you
     automatically, and the *note compose: compose. module provides a
     compose-a-sync macro for composition.  If those convenience
     procedures are used, exceptions should always be handled locally in
     the waitable procedure (and if the callback might throw, in the
     callback also) if it is undesirable that uncaught exceptions
     propagate out of event-loop-run!.  In the case of
     await-task-in-thread!, that procedure also takes an optional
     handler argument which will handle any exceptions thrown by the
     task: otherwise the task thread throwing would terminate the
     program if not caught within the task.

     There can be as many calls to 'await' and asynchronous callbacks in
     any one waitable procedure as wanted, to enable composition of
     asynchronous operations.  However, you cannot run two or more
     asynchronous tasks at the same time with the same await-resume pair
     without an intervening call to await except by doing extra work,
     because the first call to 'await' will match the first callback
     which happens to call 'resume', and so on.  In such cases, 'resume'
     would need to return something like a key-value pair so that the
     result can be correctly identified.  Accordingly this practice is
     discouraged.  Instead, when composing asynchronous tasks within any
     one waitable procedure, operate on a 'start-task -> await-on-result
     -> start-task -> await-on-result ...'  basis, and make calls to
     a-sync on separate waitable procedures for tasks which are to run
     independently (as soon as any code calls a-sync's 'await' procedure
     in any a-sync block, a-sync will return and whatever follows it
     will begin executing, including any following a-sync block).  This
     approach is easy using the convenience procedures mentioned above
     (see the examples below).  A waitable procedure can itself call
     a-sync to construct another await-resume pair for the purpose of
     starting other asynchronous events.

     So, don't do this:

          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)

          	  (timeout-post! 100
          			 (lambda ()
          			   (resume "expired")
          			   #f))
          	  (event-post! (lambda ()
          			 (resume (+ 1 1))))

          	  (simple-format #t "Timeout ~A\n" (await))
          	  (simple-format #t "1 + 1 is ~A\n" (await))))
          (event-loop-run!)

     Instead do this, where the two asynchronous operations are to run
     consecutively:

          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)

          	  (timeout-post! 100
          			 (lambda ()
          			   (resume "expired")
          			   #f))
          	  (simple-format #t "Timeout ~A\n" (await))
          	  (event-post! (lambda ()
          			 (resume (+ 1 1))))

          	  (simple-format #t "1 + 1 is ~A\n" (await))))
          (event-loop-run!)

     or this, where the two asynchronous operations are to run
     concurrently (the summing of 1 and 1 will finish before the
     timeout):

          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (timeout-post! 100
          			 (lambda ()
          			   (resume "expired")
          			   #f))
          	  (simple-format #t "Timeout ~A\n" (await))))
          (a-sync (lambda (await resume)
          	  (event-post! (lambda ()
          			 (resume (+ 1 1))))
          	  (simple-format #t "1 + 1 is ~A\n" (await))))

          (event-loop-run!)

     Or better still, when composing on the event loop from the *note
     event-loop: event loop. module, use the await helper procedures, as
     follows (in this example the two asynchronous operations run
     consecutively):

          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (simple-format #t
          			 "Timeout ~A\n"
          			 (await-timeout! await resume
          					 100
          					 (lambda ()
          					   "expired")))
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-task! await resume
          				      (lambda ()
          					(+ 1 1))))))
          (event-loop-run!)

     or this, where the two asynchronous operations run concurrently
     (the summing of 1 and 1 will finish before the timeout)

          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (simple-format #t
          			 "Timeout ~A\n"
          			 (await-timeout! await resume
          					 100
          					 (lambda ()
          					   "expired")))))
          (a-sync (lambda (await resume)
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-task! await resume
          				      (lambda ()
          					(+ 1 1))))))
          (event-loop-run!)

     Or the compose-a-sync macro in the *note compose: compose. module
     can be used so that the last two examples are constructed as
     follows (in this first case the two asynchronous operations run
     consecutively)

          (set-default-event-loop!) ;; if none has yet been set
          (compose-a-sync ((ret1 (await-timeout! 100
          				       (lambda ()
          					 "expired")))
          		 (ignore ((no-await (simple-format #t "Timeout ~A\n" ret1))))
          		 (ret2 (await-task! (lambda ()
          				      (+ 1 1)))))
          	   ((no-await (simple-format #t "1 + 1 is ~A\n" ret2))))
          (event-loop-run!)

     and this, where the two asynchronous operations run concurrently
     (the summing of 1 and 1 will finish before the timeout)

          (set-default-event-loop!) ;; if none has yet been set
          (compose-a-sync ((ret (await-timeout! 100
          				      (lambda ()
          				        "expired"))))
          	   ((no-await (simple-format #t "Timeout ~A\n" ret))))
          (compose-a-sync ((ret (await-task! (lambda ()
          				     (+ 1 1)))))
          	   ((no-await (simple-format #t "1 + 1 is ~A\n" ret))))
          (event-loop-run!)

     The a-sync procedure can be used with any event loop, including the
     glib event loop provided by guile-gnome and so with gtk+ callbacks,
     and with the event loop in the event-loop module.


File: guile-a-sync.info,  Node: event loop,  Next: monotonic time,  Prev: coroutines,  Up: Top

The (a-sync event-loop) module provides an event loop for asynchronous
operations.  The event loop does not of itself start any new threads.
Instead it runs in the thread which calls event-loop-run!: that
procedure will block while there are events to be processed.  In most
programs the event loop will run in the main program thread, with which
the program began.  Many programs using event loops are entirely single
threaded.

   However, the event loop provided by this module does support multiple
threads.  Most of the event loop procedures in this module are thread
safe and may be called in any thread.  The thread safe procedures are
event-loop-run!  (as mentioned, this will cause the event loop to run in
the thread which calls it), event-loop-block!, event-loop-quit!,
event-post!, event-loop-add-read-watch!, event-loop-add-write-watch!,
event-loop-remove-read-watch!, event-loop-remove-write-watch!,
timeout-post!  and timeout-remove!.  In particular, event-post!  allows
worker threads to post an event to an event loop, say with the result of
a computation, so that the event callback will execute in the event loop
thread.

   This modules provides the following procedures:

 -- Scheme Procedure: set-default-event-loop! [loop]
     The 'loop' (event loop) argument is optional.  This procedure sets
     the default event loop for the procedures in this module to the one
     passed in (which must have been constructed by the make-event-loop
     procedure), or if no argument is passed (or #f is passed), a new
     event loop will be constructed for you as the default, which can be
     accessed via the get-default-event-loop procedure.  The default
     loop variable is not a fluid or a parameter - it is intended that
     the default event loop is the same for every thread in the program,
     and that the default event loop would normally run in the thread
     with which the program started.  This procedure is not thread safe
     - if it might be called by a different thread from others which
     might access the default event loop, then external synchronization
     may be required.  However, that should not normally be an issue.
     The normal course would be to call this procedure once only on
     program start up, before other threads have started.  It is usually
     a mistake to call this procedure twice: if there are asynchronous
     events pending (that is, if event-loop-run!  has not returned) you
     will probably not get the results you expect.

 -- Scheme Procedure: get-default-event-loop
     This returns the default loop set by the set-default-event-loop!
     procedure, or #f if none has been set.

 -- Scheme Procedure: make-event-loop
     This constructs a new event loop object.

 -- Scheme Procedure: event-loop? obj
     This procedure indicates whether 'obj' is an event-loop object
     constructed by make-event-loop.

 -- Scheme Procedure: event-loop-run! [loop]
     The 'loop' (event loop) argument is optional.  This procedure
     starts the event loop passed in as an argument, or if none is
     passed (or #f is passed) it starts the default event loop.  The
     event loop will run in the thread which calls this procedure.  If
     this procedure has returned, including after a call to
     event-loop-quit!, this procedure may be called again to restart the
     event loop.  If a callback throws, or something else throws in the
     implementation, then this procedure will clean up the event loop as
     if event-loop-quit!  had been called, and the exception will be
     rethrown out of this procedure.

 -- Scheme Procedure: event-loop-add-read-watch! file proc [loop]
     The 'loop' (event loop) argument is optional.  This procedure will
     start a read watch in the event loop passed in as an argument, or
     if none is passed (or #f is passed), in the default event loop.
     The 'proc' callback should take a single argument, and when called
     this will be set to 'in or 'excpt.  The same port or file
     descriptor can also be passed to event-loop-add-write-watch, and if
     so and the descriptor is also available for writing, the write
     callback will also be called with its argument set to 'out.  If
     there is already a read watch for the file passed, the old one will
     be replaced by the new one.  If proc returns #f, the read watch
     will be removed from the event loop, otherwise the watch will
     continue.  This is thread safe - any thread may add a watch, and
     the callback will execute in the event loop thread.  The file
     argument can be either a port or a file descriptor.  If 'file' is a
     file descriptor, any port for the descriptor is not referenced for
     garbage collection purposes - it must remain valid while operations
     are carried out on the descriptor.  If 'file' is a buffered port,
     buffering will be taken into account in indicating whether a read
     can be made without blocking (but on a buffered port, for
     efficiency purposes each read operation in response to this watch
     should usually exhaust the buffer by looping on char-ready?).

     This procedure should not throw an exception unless memory is
     exhausted.  If 'proc' throws, say because of port errors, and the
     exception is not caught locally, it will propagate out of
     event-loop-run!.

 -- Scheme Procedure: event-loop-add-write-watch! file proc [loop]
     The 'loop' (event loop) argument is optional.  This procedure will
     start a write watch in the event loop passed in as an argument, or
     if none is passed (or #f is passed), in the default event loop.
     The 'proc' callback should take a single argument, and when called
     this will be set to 'out or 'excpt.  The same port or file
     descriptor can also be passed to event-loop-add-read-watch, and if
     so and the descriptor is also available for reading or in
     exceptional condition, the read callback will also be called with
     its argument set to 'in or 'excpt (if both a read and a write watch
     have been set for the same file argument, and there is an
     exceptional condition, it is the read watch procedure which will be
     called with 'excpt rather than the write watch procedure, so if
     that procedure returns #f only the read watch will be removed).  If
     there is already a write watch for the file passed, the old one
     will be replaced by the new one.  If proc returns #f, the write
     watch will be removed from the event loop, otherwise the watch will
     continue.  This is thread safe - any thread may add a watch, and
     the callback will execute in the event loop thread.  The file
     argument can be either a port or a file descriptor.  If 'file' is a
     file descriptor, any port for the descriptor is not referenced for
     garbage collection purposes - it must remain valid while operations
     are carried out on the descriptor.  If 'file' is a buffered port,
     buffering will be taken into account in indicating whether a write
     can be made without blocking.

     This procedure should not throw an exception unless memory is
     exhausted.  If 'proc' throws, say because of port errors, and the
     exception is not caught locally, it will propagate out of
     event-loop-run!.

 -- Scheme Procedure: event-loop-remove-read-watch! file [loop]
     The 'loop' (event loop) argument is optional.  This procedure will
     remove a read watch from the event loop passed in as an argument,
     or if none is passed (or #f is passed), from the default event
     loop.  The file argument may be a port or a file descriptor.  This
     is thread safe - any thread may remove a watch.  A file descriptor
     and a port with the same underlying file descriptor compare equal
     for the purposes of removal.

 -- Scheme Procedure: event-loop-remove-write-watch! file [loop]
     The 'loop' (event loop) argument is optional.  This procedure will
     remove a write watch from the event loop passed in as an argument,
     or if none is passed (or #f is passed), from the default event
     loop.  The file argument may be a port or a file descriptor.  This
     is thread safe - any thread may remove a watch.  A file descriptor
     and a port with the same underlying file descriptor compare equal
     for the purposes of removal.

 -- Scheme Procedure: event-post! action [loop]
     The 'loop' (event loop) argument is optional.  This procedure will
     post a callback for execution in the event loop passed in as an
     argument, or if none is passed (or #f is passed), in the default
     event loop.  The 'action' callback is a thunk.  This is thread safe
     - any thread may post an event (that is its main purpose), and the
     action callback will execute in the event loop thread.  Actions
     execute in the order in which they were posted.  If an event is
     posted from a worker thread, it will normally be necessary to call
     event-loop-block!  beforehand.

     This procedure should not throw an exception unless memory is
     exhausted.  If the 'action' callback throws, and the exception is
     not caught locally, it will propagate out of event-loop-run!.

 -- Scheme Procedure: timeout-post! msecs action [loop]
     The 'loop' (event loop) argument is optional.  This procedure adds
     a timeout to the event loop passed in as an argument, or if none is
     passed (or #f is passed), to the default event loop.  The timeout
     will repeat unless and until the passed-in callback returns #f or
     timeout-remove!  is called.  The passed-in callback must be a
     thunk.  This procedure returns a tag symbol to which
     timeout-remove!  can be applied.  It may be called by any thread,
     and the timeout callback will execute in the event loop thread.

     This procedure should not throw an exception unless memory is
     exhausted.  If the 'action' callback throws, and the exception is
     not caught locally, it will propagate out of event-loop-run!.

 -- Scheme Procedure: timeout-remove! tag [loop]
     The 'loop' (event loop) argument is optional.  This procedure stops
     the timeout with the given tag from executing in the event loop
     passed in as an argument, or if none is passed (or #f is passed),
     in the default event loop.  It may be called by any thread.

 -- Scheme Procedure: event-loop-block! val [loop]
     By default, upon there being no more watches, timeouts and posted
     events for an event loop, event-loop-run!  will return, which is
     normally what you want with a single threaded program.  However,
     this is undesirable where a worker thread is intended to post an
     event to the main loop after it has reached a result, say via
     await-task-in-thread!, because the main loop may have ended before
     it posts.  Passing #t to the val argument of this procedure will
     prevent that from happening, so that the event loop can only be
     ended by calling event-loop-quit!, or by calling event-loop-block!
     again with a #f argument (to switch the event loop back to
     non-blocking mode, pass #f).  This is thread safe - any thread may
     call this procedure.  The 'loop' (event loop) argument is optional:
     this procedure operates on the event loop passed in as an argument,
     or if none is passed (or #f is passed), on the default event loop.

 -- Scheme Procedure: event-loop-quit! [loop]
     This procedure causes an event loop to unblock.  Any events
     remaining in the event loop will be discarded.  New events may
     subsequently be added after event-loop-run!  has unblocked and
     event-loop-run!  then called for them.  This is thread safe - any
     thread may call this procedure.  The 'loop' (event loop) argument
     is optional: this procedure operates on the event loop passed in as
     an argument, or if none is passed (or #f is passed), on the default
     event loop.

 -- Scheme Procedure: await-task-in-thread! await resume [loop] thunk
          [handler]
     The loop and handler arguments are optional.  The procedure will
     run 'thunk' in its own thread, and then post an event to the event
     loop specified by the 'loop' argument when 'thunk' has finished, or
     to the default event loop if no 'loop' argument is provided or if
     #f is provided as the 'loop' argument (pattern matching is used to
     detect the type of the third argument).  This procedure calls
     'await' and will return the thunk's return value.  It is intended
     to be called in a waitable procedure invoked by a-sync.  It will
     normally be necessary to call event-loop-block!  before invoking
     this procedure.  If the optional 'handler' argument is provided,
     then that handler will be run in the event loop thread if 'thunk'
     throws and the return value of the handler would become the return
     value of this procedure; otherwise the program will terminate if an
     unhandled exception propagates out of 'thunk'.  'handler' should
     take the same arguments as a guile catch handler (this is
     implemented using catch).

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs, where the result
     of calling 'thunk' will be received.  As mentioned above, the thunk
     itself will run in its own thread.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the worker thread starts), which
     shouldn't happen unless memory is exhausted or pthread has run out
     of resources.  Exceptions arising during execution of the task, if
     not caught by a handler procedure, will terminate the program.
     Exceptions thrown by the handler procedure will propagate out of
     event-loop-run!.

     Here is an example of the use of await-task-in-thread!:
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-task-in-thread! await resume
          						(lambda ()
          						  (+ 1 1))))
          	  (event-loop-quit!)))
          (event-loop-block! #t) ;; because the task runs in another thread
          (event-loop-run!)

 -- Scheme Procedure: await-task! await resume [loop] thunk
     The 'loop' argument is optional.  This is a convenience procedure
     for use with an event loop, which will run 'thunk' in the event
     loop specified by the 'loop' argument, or in the default event loop
     if no 'loop' argument is provided or #f is provided as the 'loop'
     argument.  This procedure calls 'await' and will return the thunk's
     return value.  It is intended to be called in a waitable procedure
     invoked by a-sync.  It is the single-threaded corollary of
     await-task-in-thread!.  This means that (unlike with
     await-task-in-thread!)  while 'thunk' is running other events in
     the event loop will not make progress.  This is not particularly
     useful except, say, when called by the event loop thread for the
     purpose of bringing the event loop to an end at its own place in
     the event queue, or for co-operative multi-tasking, say by
     composing tasks with compose-a-sync (see the *note compose:
     compose. module).

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the task starts), which shouldn't
     happen unless memory is exhausted.  Exceptions arising during
     execution of the task, if not caught locally, will propagate out of
     event-loop-run!.

     Here is an example of the use of await-task!:
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-task! await resume
          				      (lambda ()
          					(+ 1 1))))))
          (event-loop-run!)

 -- Scheme Procedure: await-timeout! await resume [loop] msecs thunk
     This is a convenience procedure for use with an event loop, which
     will run 'thunk' in the event loop thread when the timeout expires.
     This procedure calls 'await' and will return the thunk's return
     value.  It is intended to be called in a waitable procedure invoked
     by a-sync.  The timeout is single shot only - as soon as 'thunk'
     has run once and completed, the timeout will be removed from the
     event loop.  The 'loop' argument is optional: this procedure
     operates on the event loop passed in as an argument, or if none is
     passed (or #f is passed), on the default event loop.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Exceptions
     thrown by 'thunk', if not caught locally, will propagate out of
     event-loop-run!.

     Here is an example of the use of event-timeout!:
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (simple-format #t
          			 "Timeout ~A\n"
          			 (await-timeout! await resume
          					 100
          					 (lambda ()
          					   "expired")))))
          (event-loop-run!)

 -- Scheme Procedure: a-sync-read-watch! resume file proc [loop]
     This is a convenience procedure for use with an event loop, which
     will run 'proc' in the event loop thread whenever 'file' is ready
     for reading, and apply 'resume' (obtained from a call to a-sync) to
     the return value of 'proc'.  'file' can be a port or a file
     descriptor (and if it is a file descriptor, the revealed count is
     not incremented).  'proc' should take a single argument which will
     be set by the event loop to 'in or 'excpt (see the documentation on
     event-loop-add-read-watch!  for further details).  It is intended
     to be called in a waitable procedure invoked by a-sync.  The watch
     is multi-shot - it is for the user to bring it to an end at the
     right time by calling event-loop-remove-read-watch!  in the
     waitable procedure.  This procedure is mainly intended as something
     from which higher-level asynchronous file operations can be
     constructed, such as the await-readline!  procedure.  The 'loop'
     argument is optional: this procedure operates on the event loop
     passed in as an argument, or if none is passed (or #f is passed),
     on the default event loop

     Because this procedure takes a 'resume' argument derived from the
     a-sync procedure, it must (like the a-sync procedure) in practice
     be called in the same thread as that in which the event loop runs.

     This procedure should not throw an exception unless memory is
     exhausted.  If 'proc' throws, say because of port errors, and the
     exception is not caught locally, it will propagate out of
     event-loop-run!.

     As an example of how to use a-sync-read-watch!, here is the
     implementation of await-getline!:
          (define await-getline!
             (case-lambda
              ((await resume port)
               (await-getline! await resume #f port))
              ((await resume loop port)
               (let ()
                 (define chunk-size 128)
                 (define text (make-string chunk-size))
                 (define text-len 0)
                 (define (append-char! ch)
          	 (when (and (= (modulo text-len chunk-size) 0)
          		    (> text-len 0))
          	   (let ((tmp text))
          	     (set! text (make-string (+ text-len chunk-size)))
          	     (string-copy! text 0 tmp)))
          	 (string-set! text text-len ch)
          	 (set! text-len (1+ text-len)))
                 (a-sync-read-watch! resume
          			   port
          			   (lambda (status)
          			     (if (eq? status 'excpt)
          				 #f
          				 (let next ()
          				   (let ((ch (read-char port)))
          				     (cond
          				      ((eof-object? ch)
          				       (if (= text-len 0)
          					   ch
          					   (substring/shared text 0 text-len)))
          				      ((char=? ch #\newline)
          				       (substring/shared text 0 text-len))
          				      (else
          				       (append-char! ch)
          				       (if (char-ready? port)
          					   (next)
          					   'more)))))))
          			   loop))
               (let next ((res (await)))
                 (if (eq? res 'more)
          	   (next (await))
          	   (begin
          	     (event-loop-remove-read-watch! port loop)
          	     res))))))

 -- Scheme Procedure: await-getline! await resume [loop] port
     This is a convenience procedure for use with an event loop, which
     will start a read watch on 'port' for a line of input.  It calls
     'await' while waiting for input and will return the line of text
     received (without the terminating '\n' character).  The event loop
     will not be blocked by this procedure even if only individual
     characters are available at any one time.  It is intended to be
     called in a waitable procedure invoked by a-sync, and this
     procedure is implemented using a-sync-read-watch!.  If an
     exceptional condition ('excpt) is encountered, #f will be returned.
     If an end-of-file object is encountered which terminates a line of
     text, a string containing the line of text will be returned (and
     from version 0.3, if an end-of-file object is encountered without
     any text, the end-of-file object is returned rather than an empty
     string).  The 'loop' argument is optional: this procedure operates
     on the event loop passed in as an argument, or if none is passed
     (or #f is passed), on the default event loop.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Subsequent
     exceptions (say, because of port errors) will propagate out of
     event-loop-run!.

     Here is an example of the use of await-getline!:
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (display "Enter a line of text at the keyboard\n")
          	  (simple-format #t
          			 "The line was: ~A\n"
          			 (await-getline! await resume
          					 (open "/dev/tty" O_RDONLY)))))
          (event-loop-run!)

 -- Scheme Procedure: await-geteveryline! await resume [loop] port proc
     This is a convenience procedure for use with an event loop, which
     will start a read watch on 'port' for lines of input.  It calls
     'await' while waiting for input and will apply 'proc' to every
     complete line of text received (without the terminating '\n'
     character).  'proc' should be a procedure taking a string as its
     only argument.

     The event loop will not be blocked by this procedure even if only
     individual characters are available at any one time.  It is
     intended to be called in a waitable procedure invoked by a-sync,
     and this procedure is implemented using a-sync-read-watch!.  Unlike
     the await-getline!  procedure, the watch will continue after a line
     of text has been received in order to receive further lines.  The
     watch will not end until end-of-file or an exceptional condition
     ('excpt) is reached.  In the event of that happening, this
     procedure will end and return an end-of-file object or #f
     respectively.

     The 'loop' argument is optional: this procedure operates on the
     event loop passed in as an argument, or if none is passed (or #f is
     passed), on the default event loop.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Subsequent
     exceptions (say, because of port errors) will propagate out of
     event-loop-run!.

     This procedure is available from version 0.3.

     Here is an example of the use of await-geteveryline!  (because the
     keyboard has no end-of-file, use Ctrl-C to exit this code snippet):
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (display "Enter lines of text at the keyboard, ^C to finish\n")
          	  (let ((port (open "/dev/tty" O_RDONLY)))
          	    (await-geteveryline! await resume
          				 port
          				 (lambda (line)
          				   (simple-format #t
          						  "The line was: ~A\n"
          						  line))))))
          (event-loop-run!)

 -- Scheme Procedure: await-getsomelines! await resume [loop] port proc
     This is a convenience procedure for use with an event loop, which
     does the same as await-geteveryline!, except that it provides a
     second argument to 'proc', namely an escape continuation which can
     be invoked by 'proc' to cause the procedure to return before
     end-of-file is reached.  Behavior is identical to
     await-geteveryline!  if the continuation is not invoked.

     This procedure will start a read watch on 'port' for lines of
     input.  It calls 'await' while waiting for input and will apply
     'proc' to any complete line of text received (without the
     terminating '\n' character).  'proc' should be a procedure taking
     two arguments, a string as the first argument containing the line
     of text read, and an escape continuation as its second.

     The event loop will not be blocked by this procedure even if only
     individual characters are available at any one time.  It is
     intended to be called in a waitable procedure invoked by a-sync.
     This procedure is implemented using a-sync-read-watch!.  The watch
     will not end until end-of-file or an exceptional condition ('excpt)
     is reached, which would cause this procedure to end and return an
     end-of-file object or #f respectively, or until the escape
     continuation is invoked, in which case the value passed to the
     escape continuation will be returned.

     The 'loop' argument is optional: this procedure operates on the
     event loop passed in as an argument, or if none is passed (or #f is
     passed), on the default event loop.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the event loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Subsequent
     exceptions (say, because of port errors) will propagate out of
     event-loop-run!.

     This procedure is available from version 0.4.

     Here is an example of the use of await-geteveryline!:
          (set-default-event-loop!) ;; if none has yet been set
          (a-sync (lambda (await resume)
          	  (display "Enter lines of text at the keyboard, enter an empty line to finish\n")
          	  (let ((port (open "/dev/tty" O_RDONLY)))
          	    (await-getsomelines! await resume
          				 port
          				 (lambda (line k)
                                             (when (string=? line "")
          					 (k #f))
          				   (simple-format #t
          						  "The line was: ~A\n"
          						  line))))))
          (event-loop-run!)

 -- Scheme Procedure: a-sync-write-watch! resume file proc [loop]
     This is a convenience procedure for use with an event loop, which
     will run 'proc' in the event loop thread whenever 'file' is ready
     for writing, and apply 'resume' (obtained from a call to a-sync) to
     the return value of 'proc'.  'file' can be a port or a file
     descriptor (and if it is a file descriptor, the revealed count is
     not incremented).  'proc' should take a single argument which will
     be set by the event loop to 'out or 'excpt (see the documentation
     on event-loop-add-write-watch!  for further details).  It is
     intended to be called in a waitable procedure invoked by a-sync.
     The watch is multi-shot - it is for the user to bring it to an end
     at the right time by calling event-loop-remove-write-watch!  in the
     waitable procedure.  This procedure is mainly intended as something
     from which higher-level asynchronous file operations can be
     constructed.  The 'loop' argument is optional: this procedure
     operates on the event loop passed in as an argument, or if none is
     passed (or #f is passed), on the default event loop

     Because this procedure takes a 'resume' argument derived from the
     a-sync procedure, it must (like the a-sync procedure) in practice
     be called in the same thread as that in which the event loop runs.

     This procedure should not throw an exception unless memory is
     exhausted.  If 'proc' throws, say because of port errors, and the
     exception is not caught locally, it will propagate out of
     event-loop-run!.

   The (async event-loop) module also loads the *note (a-sync
monotonic-time): monotonic time. module.


File: guile-a-sync.info,  Node: monotonic time,  Next: gnome glib,  Prev: event loop,  Up: Top

The (a-sync monotonic-time) module provides two procedures.  It is
loaded by the *note (a-sync event-loop): event loop. module.

 -- Scheme Procedure: have-monotonic-time?
     This procedure indicates whether the get-time procedure (see below)
     provides a monotonic clock.  Almost all modern linux/unix-like
     systems will do so.  This procedure may return #f if windows is in
     use, or if the guile-a-sync library was cross-compiled on one
     architecture for a different one.

 -- Scheme Procedure: get-time
     This returns the current time as a (secs .  usecs) pair from some
     arbitrary epoch.  If (have-monotonic-time) returns #t, then this
     will be derived from a monotonic clock obtained by calling the
     clock_gettime() POSIX function with a CLOCK_MONOTONIC argument.
     This procedure is used by the *note event-loop: event loop. timeout
     implementation.  This procedure throws an 'a-sync-exception (which
     would propagate out of the event-loop-run!  procedure if *note
     event-loop: event loop. is in use) if the library has been
     configured for monotonic time at configuration time but it is not
     in fact supported.  However this is not worth catering for by user
     code as it should never happen - the library configuration macros
     should always give the correct answer


File: guile-a-sync.info,  Node: gnome glib,  Next: compose,  Prev: monotonic time,  Up: Top

When using the scheme (gnome gtk) bindings of guile-gnome with guile, in
order to provide await semantics on gtk+ callbacks it will normally be
necessary to use the 'await' and 'resume' procedures provided by the
a-sync procedure in the *note (a-sync coroutines): coroutines. module
directly (calling 'resume' in the gtk+ callback when ready, and waiting
on that callback using 'await').  However when launching timeouts, file
watches or idle events on the glib main loop, convenience procedures are
possible similar to those provided for the event loop in the *note
(a-sync event-loop): event loop. module.  These are set out below.

   Note that the g-idle-add procedure in guile-gnome is suspect - there
appears to be a garbage collection issue, and if you call the procedure
often enough in a single or multi-threaded program it will eventually
segfault.  g-io-add-watch is also broken in guile-gnome, so this library
uses its own glib-add-watch procedure which is exported publicly in case
it is useful to users.

   All the other scheme files provided by this library are by default
compiled by this library to bytecode.  That is not the case with this
module, so as not to create a hard dependency on guile-gnome.

   The (a-sync gnome-glib) module provides the following procedures:

 -- Scheme Procedure: await-glib-task-in-thread await resume thunk
          [handler]
     This is a convenience procedure which will run 'thunk' in its own
     thread, and then post an event to the default glib main loop when
     'thunk' has finished.  This procedure calls 'await' and will return
     the thunk's return value.  It is intended to be called in a
     waitable procedure invoked by a-sync.  If the optional 'handler'
     argument is provided, then it will be run in the event loop thread
     if 'thunk' throws and its return value will be the return value of
     this procedure; otherwise the program will terminate if an
     unhandled exception propagates out of 'thunk'.  'handler' should
     take the same arguments as a guile catch handler (this is
     implemented using catch).

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the default glib main loop runs, where
     the result of calling 'thunk' will be received.  As mentioned
     above, the thunk itself will run in its own thread.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the worker thread starts), which
     shouldn't happen unless memory is exhausted or pthread has run out
     of resources.  Exceptions arising during execution of the task, if
     not caught by a handler procedure, will terminate the program.
     Exceptions thrown by the handler procedure will propagate out of
     g-main-loop-run.

     This procedure uses g-idle-add: see the introductory remarks about
     that.

     Here is an example of the use of await-glib-task-in-thread:
          (define main-loop (g-main-loop-new #f #f))
          (a-sync (lambda (await resume)
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-glib-task-in-thread await resume
          						    (lambda ()
          						      (+ 1 1))))
          	  (g-main-loop-quit main-loop)))
          (g-main-loop-run main-loop)

 -- Scheme Procedure: await-glib-task await resume thunk
     This is a convenience procedure for use with glib, which will run
     'thunk' in the default glib main loop.  This procedure calls
     'await' and will return the thunk's return value.  It is intended
     to be called in a waitable procedure invoked by a-sync.  It is the
     single-threaded corollary of await-glib-task-in-thread.  This means
     that (unlike with await-glib-task-in-thread) while 'thunk' is
     running other events in the main loop will not make progress.  This
     is not particularly useful except, say, when called by the main
     loop thread for the purpose of bringing the loop to an end at its
     own place in the event queue, or for co-operative multi-tasking,
     say by composing tasks with compose-a-sync (see the *note (a-sync
     compose): compose. module).

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the default glib main loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the task starts), which shouldn't
     happen unless memory is exhausted.  Exceptions arising during
     execution of the task, if not caught locally, will propagate out of
     g-main-loop-run.

     This procedure uses g-idle-add: see the introductory remarks about
     that.

     Here is an example of the use of await-glib-task:
          (define main-loop (g-main-loop-new #f #f))
          (a-sync (lambda (await resume)
          	  (simple-format #t "1 + 1 is ~A\n"
          			 (await-glib-task await resume
          					  (lambda ()
          					    (+ 1 1))))
          	  (g-main-loop-quit main-loop)))
          (g-main-loop-run main-loop)

 -- Scheme Procedure: await-glib-timeout await resume msecs thunk
     This is a convenience procedure for use with a glib main loop,
     which will run 'thunk' in the default glib main loop when the
     timeout expires.  This procedure calls 'await' and will return the
     thunk's return value.  It is intended to be called in a waitable
     procedure invoked by a-sync.  The timeout is single shot only - as
     soon as 'thunk' has run once and completed, the timeout will be
     removed from the event loop.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the default glib main loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Exceptions
     thrown by 'thunk', if not caught locally, will propagate out of
     g-main-loop-run.

     Here is an example of the use of await-glib-timeout:
          (define main-loop (g-main-loop-new #f #f))
          (a-sync (lambda (await resume)
          	  (simple-format #t
          			 "Timeout ~A\n"
          			 (await-glib-timeout await resume
          					     100
          					     (lambda ()
          					       "expired")))
          	  (g-main-loop-quit main-loop)))
          (g-main-loop-run main-loop)

 -- Scheme Procedure: glib-add-watch ioc cond func [context]
     This procedure replaces guile-gnome's g-io-add-watch procedure,
     which won't compile.  It attaches a watch on a g-io-channel object
     to the main context provided, or if none is provided, to the
     default glib main context (the main program loop).  It returns a
     glib ID which can be passed subsequently to the g-source-remove
     procedure.  It should be possible to call this procedure in any
     thread.

     See the documentation on the a-sync-glib-read-watch procedure for
     some of the difficulties with using g-io-channel watches with
     guile-gnome.

 -- Scheme Procedure: a-sync-glib-read-watch resume fd proc
     This is a convenience procedure for use with a glib main loop,
     which will run 'proc' in the default glib main loop whenever the
     file descriptor 'fd' is ready for reading, and apply resume
     (obtained from a call to a-sync) to the return value of 'proc'.
     'proc' should take two arguments, the first of which will be set by
     glib to the g-io-channel object constructed for the watch and the
     second of which will be set to the GIOCondition ('in, 'hup or 'err)
     provided by glib which caused the watch to activate.  It is
     intended to be called in a waitable procedure invoked by a-sync.
     The watch is multi-shot - it is for the user to bring it to an end
     at the right time by calling g-source-remove in the waitable
     procedure on the id tag returned by this procedure.  Any port for
     the file descriptor 'fd' is not referenced for garbage collection
     purposes - it must remain valid while the read watch is active.
     This procedure is mainly intended as something from which
     higher-level asynchronous file operations can be constructed, such
     as the await-glib-getline procedure.

     File watches in guile-gnome are implemented using a GIOChannel
     object, and unfortunately GIOChannel support in guile-gnome is
     decaying.  The only procedure that guile-gnome provides to read
     from a GIOChannel object is g-io-channel-read-line, which does not
     work.  One is therefore usually left with having to read from a
     guile port (whose underlying file descriptor is 'fd') using guile's
     port input procedures, but this has its own difficulties because
     either the port has to be unbuffered (say by using the R6RS
     open-file-input-port procedure with a buffer-mode of none), or
     'proc' must deal with everything in the port's buffer by looping on
     char-ready?  before returning.  This is because if the port is
     buffered, once the port is read from there may be further
     characters in the buffer to be dealt with even though the
     GIOChannel watch does not trigger because there is nothing new to
     make the file descriptor ready for reading.

     Because this procedure takes a 'resume' argument derived from the
     a-sync procedure, it must (like the a-sync procedure) in practice
     be called in the same thread as that in which the default glib main
     loop runs.

     This procedure should not throw an exception unless memory is
     exhausted, or guile-glib throws for some other reason.  If 'proc'
     throws, say because of port errors, and the exception is not caught
     locally, it will propagate out of g-main-loop-run.

     As an example of how to use a-sync-glib-read-watch, here is the
     implementation of await-glib-getline:
          (define (await-glib-getline await resume port)
            (define chunk-size 128)
            (define text (make-string chunk-size))
            (define text-len 0)
            (define (append-char! ch)
              (when (and (= (modulo text-len chunk-size) 0)
          	       (> text-len 0))
                (let ((tmp text))
          	(set! text (make-string (+ text-len chunk-size)))
          	(string-copy! text 0 tmp)))
              (string-set! text text-len ch)
              (set! text-len (1+ text-len)))
            (define id (a-sync-glib-read-watch resume
          				     (port->fdes port)
          				     (lambda (ioc status)
          				       (let next ()
          					 (let ((ch (read-char port)))
          					   (cond
          					    ((eof-object? ch)
          					     (if (= text-len 0)
          						 ch
          						 (substring/shared text 0 text-len)))
          					    ((char=? ch #\newline)
          					     (substring/shared text 0 text-len))
          					    (else
          					     (append-char! ch)
          					     (if (char-ready? port)
          						 (next)
          						 'more))))))))
            (let next ((res (await)))
              (if (eq? res 'more)
          	(next (await))
          	(begin
          	  (g-source-remove id)
          	  (release-port-handle port)
          	  res))))

 -- Scheme Procedure: await-glib-getline await resume port
     This is a convenience procedure for use with a glib main loop,
     which will start a read watch on 'port' for a line of input.  It
     calls 'await' while waiting for input and will return the line of
     text received (without the terminating '\n' character).  The event
     loop will not be blocked by this procedure even if only individual
     characters are available at any one time.  It is intended to be
     called in a waitable procedure invoked by a-sync, and this
     procedure is implemented using a-sync-glib-read-watch.  If an
     end-of-file object is encountered which terminates a line of text,
     a string containing the line of text will be returned (and from
     version 0.3, if an end-of-file object is encountered without any
     text, the end-of-file object is returned rather than an empty
     string).

     For the reasons explained in the documentation on
     a-sync-glib-read-watch, this procedure only works correctly if the
     port passed to the 'port' argument has buffering switched off, say
     by using the R6RS open-file-input-port procedure with a buffer-mode
     of none.  This makes the procedure less useful than would otherwise
     be the case.

     This procedure must (like the a-sync procedure) be called in the
     same thread as that in which the default glib main loop runs.

     Exceptions may propagate out of this procedure if they arise while
     setting up (that is, before the first call to 'await' is made),
     which shouldn't happen unless memory is exhausted.  Subsequent
     exceptions (say, because of port errors) will propagate out of
     g-main-loop-run.

     Here is an example of the use of await-glib-getline:
          (define main-loop (g-main-loop-new #f #f))
          (a-sync (lambda (await resume)
                    (display "Enter a line of text at the keyboard\n")
                    (simple-format #t
                                   "The line was: ~A\n"
                                   (await-glib-getline await resume
          					     (open-file-input-port "/dev/tty" (file-options) (buffer-mode none))))
          	  (g-main-loop-quit main-loop)))
          (g-main-loop-run main-loop)

 -- Scheme Procedure: a-sync-glib-write-watch resume fd proc
     This is a convenience procedure for use with a glib main loop,
     which will run 'proc' in the default glib main loop whenever the
     file descriptor 'fd' is ready for writing, and apply resume
     (obtained from a call to a-sync) to the return value of 'proc'.
     'proc' should take two arguments, the first of which will be set by
     glib to the g-io-channel object constructed for the watch and the
     second of which will be set to the GIOCondition ('out or 'err)
     provided by glib which caused the watch to activate.  It is
     intended to be called in a waitable procedure invoked by a-sync.
     The watch is multi-shot - it is for the user to bring it to an end
     at the right time by calling g-source-remove in the waitable
     procedure on the id tag returned by this procedure.  Any port for
     the file descriptor 'fd' is not referenced for garbage collection
     purposes - it must remain valid while the read watch is active.
     This procedure is mainly intended as something from which
     higher-level asynchronous file operations can be constructed.

     The documentation on the a-sync-glib-read-watch procedure comments
     about about the difficulties of using GIOChannel file watches with
     buffered ports.  The difficulties are not quite so intense with
     write watches, but users are likely to get best results by using
     unbuffered output ports (say by using the R6RS
     open-file-output-port procedure with a buffer-mode of none).

     Because this procedure takes a 'resume' argument derived from the
     a-sync procedure, it must (like the a-sync procedure) in practice
     be called in the same thread as that in which the default glib main
     loop runs.

     This procedure should not throw an exception unless memory is
     exhausted, or guile-glib throws for some other reason.  If 'proc'
     throws, say because of port errors, and the exception is not caught
     locally, it will propagate out of g-main-loop-run.


File: guile-a-sync.info,  Node: compose,  Prev: gnome glib,  Up: Top

This (a-sync compose) module provides a compose-a-sync macro interface
for the a-sync procedure provided by the *note (a-sync coroutines):
coroutines. module.

 -- Syntax: (compose-a-sync [loop] ((var await-exp0) ...) await-exp1
          await-exp2 ...)
     This module provides the compose-a-sync macro.  This does two
     things: first, it calls a-sync for you and deals with the resulting
     'await' and 'resume' procedures without exposing them, which for
     many simple uses makes a-sync easier to use; and secondly it
     enables asynchronous tasks to be more easily composed on an event
     loop with intermediate results, by using a let* type syntax (in
     fact, let* is used internally).

     The 'loop' argument of compose-a-sync is optional.  If an event
     loop constructed by make-event-loop is passed to 'loop', then that
     is the main loop on which the tasks will be composed, otherwise if
     there is no 'loop' argument given, the default main loop will be
     used.  This is followed by bindings which are optional (there need
     not be any), each of which must be initialised by an expression
     comprising the application of a 'compose-a-sync'-capable procedure,
     and following the bindings there must be a body of
     'compose-a-sync'-capable procedures executed solely for the purpose
     of asynchronous side effects (this macro does not, and cannot,
     return a value because as soon as the first await is made control
     is passed to the event loop).  As in the case of let*, unlike the
     bindings the body cannot be empty - there must be at least one
     expression comprising the application of a 'compose-a-sync'-capable
     procedure in the body.

     As in the case of let*, each 'compose-a-sync'-capable procedure
     initializing a binding can see the values of the initializations
     made prior to it.  Unlike let*, compose-a-sync blocks cannot be
     nested within other compose-a-sync blocks.  Furthermore, within a
     compose-a-sync block, the result obtained from a
     'compose-a-sync'-capable procedure cannot be passed directly as an
     argument to another 'compose-a-sync'-capable procedure: the
     intermediate result must be stored as the value of a binding in the
     compose-a-sync block.

     A 'compose-a-sync'-capable procedure is one which takes an 'await'
     and 'yield' procedure from a-sync as its first and second
     arguments, and (if the optional 'loop' argument of this macro is
     used) takes the event loop as its third argument, followed by such
     further arguments as it requires.  All of the await-task!,
     await-task-in-thread!, await-timeout!, await-getline!,
     await-geteveryline!  and await-getsomelines!  procedures provided
     by the (a-sync event-loop) module are 'compose-a-sync'-capable.  In
     addition, to make an ordinary body of code which does not block
     (and which does not need to invoke a-sync's await procedure) usable
     by compose-a-sync, the no-await macro can be used to generate a
     'compose-a-sync'-capable procedure for it (see below).

     Each binding is initialized as if sequentially (although it is done
     asynchronously on the relevant event loop).  An initialization does
     not begin until an earlier one has completed.  In addition, each
     clause in the body is executed sequentially in turn, but does so
     asynchronously on the event loop using 'await' semantics.

     When calling a 'compose-a-sync'-capable procedure within a
     'compose-a-sync' block (including when initializing its bindings),
     the 'await' and 'yield' and event-loop arguments are not explicitly
     passed to it.  The compose-a-sync macro will do it for you.

          (set-default-event-loop!) ;; if none has yet been set
          (compose-a-sync ((line (await-getline! (open "/dev/tty" O_RDONLY))))
          	      ((no-await (simple-format #t
          					"The line was: ~A\n"
          					line))))
          (event-loop-run!)

     The await-glib-task, await-glib-task-in-thread, await-glib-timeout
     and await-glib-getline procedures in the *note (a-sync gnome-glib):
     gnome glib. module also meet the 'compose-a-sync'-capable
     requirements.  Here is the same example using those procedures:

          (define main-loop (g-main-loop-new #f #f))
          (compose-a-sync ((line (await-glib-getline (open "/dev/tty" O_RDONLY))))
          	      ((no-await (simple-format #t
          					"The line was: ~A\n"
          					line)
          			 (g-main-loop-quit main-loop))))
          (g-main-loop-run main-loop)

     Each block of code within a compose-a-sync block will run
     independently of (and concurrently with) code in other
     compose-a-sync blocks.  Asynchronous operations are only serialized
     within any one compose-a-sync block.  As soon as any code calls
     a-sync's 'await' procedure in a compose-a-sync block,
     compose-a-sync will return and begin executing whatever follows it,
     and further execution of the compose-a-sync block will occur within
     the event loop concerned.

     Other examples of the use of this macro are given in the
     documentation of the *note (a-sync coroutines): coroutines. module.

     This macro must (like the a-sync procedure) be called in the same
     thread as that in which the event loop runs.

 -- Syntax: (no-await body0 body1 ...)
     This macro will generate a 'compose-a-sync'-capable procedure from
     a body of code which does not block.  It can be passed to
     compose-a-sync, either for use as an initializer or as a clause in
     its body.  When used as an initializer, it evaluates to the value
     of the last expression in the 'no-await' body.

     If the body throws an exception which is not caught locally, it
     will propagate out of event-loop-run!  or g-main-loop-run, as the
     case may be.

     Here is an example of the use of no-await:

          (var ((no-await (+ a b))))



Tag Table:
Node: Top85
Node: coroutines1099
Node: event loop14941
Node: monotonic time44818
Node: gnome glib46252
Node: compose62005

End Tag Table
